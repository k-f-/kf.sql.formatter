name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          npm run compile
          node test-examples-formatter.js
          if [ $? -ne 0 ]; then
            echo "❌ Tests failed! Release aborted."
            exit 1
          fi

      - name: Lint markdown
        run: npm run lint

      - name: Extract version from tag
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$PACKAGE_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]; then
            echo "❌ Version mismatch!"
            echo "   package.json: $PACKAGE_VERSION"
            echo "   Git tag: ${{ steps.get_version.outputs.VERSION }}"
            exit 1
          fi
          echo "✅ Version verified: $PACKAGE_VERSION"

      - name: Verify README.md has correct version
        run: |
          if ! grep -q "version-${{ steps.get_version.outputs.VERSION }}-blue" README.md; then
            echo "❌ README.md version badge not updated!"
            exit 1
          fi
          if ! grep -q "releases/download/${{ steps.get_version.outputs.TAG }}" README.md; then
            echo "❌ README.md download link not updated!"
            exit 1
          fi
          echo "✅ README.md verified"

      - name: Package extension
        run: npm run package

      - name: Verify VSIX file exists
        run: |
          VSIX_FILE="kf-sql-formatter-${{ steps.get_version.outputs.VERSION }}.vsix"
          if [ ! -f "$VSIX_FILE" ]; then
            echo "❌ VSIX file not found: $VSIX_FILE"
            exit 1
          fi
          echo "✅ VSIX file created: $VSIX_FILE"
          echo "VSIX_FILE=$VSIX_FILE" >> $GITHUB_ENV

      - name: Check for release notes
        id: check_notes
        run: |
          NOTES_FILE="RELEASE_NOTES_${{ steps.get_version.outputs.TAG }}.md"
          if [ -f "$NOTES_FILE" ]; then
            echo "✅ Using custom release notes: $NOTES_FILE"
            echo "NOTES_FILE=$NOTES_FILE" >> $GITHUB_ENV
            echo "HAS_NOTES=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️  No custom release notes found, will generate from commits"
            echo "HAS_NOTES=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release description
        id: generate_notes
        run: |
          # Get previous tag
          PREV_TAG=$(git tag --sort=-v:refname | grep -A1 "${{ steps.get_version.outputs.TAG }}" | tail -1)

          if [ -z "$PREV_TAG" ]; then
            echo "First release - using all commits"
            COMMIT_RANGE="HEAD"
          else
            echo "Previous tag: $PREV_TAG"
            COMMIT_RANGE="$PREV_TAG..${{ steps.get_version.outputs.TAG }}"
          fi

          # Generate changelog from commits
          echo "## What's Changed" > /tmp/auto-release-notes.md
          echo "" >> /tmp/auto-release-notes.md

          # Group commits by type
          git log $COMMIT_RANGE --pretty=format:"%s" | while read commit; do
            case "$commit" in
              feat:*|feature:*)
                echo "- ✨ ${commit#*: }" >> /tmp/features.txt
                ;;
              fix:*|bugfix:*)
                echo "- 🐛 ${commit#*: }" >> /tmp/fixes.txt
                ;;
              docs:*)
                echo "- 📝 ${commit#*: }" >> /tmp/docs.txt
                ;;
              chore:*)
                echo "- 🔧 ${commit#*: }" >> /tmp/chore.txt
                ;;
              test:*)
                echo "- 🧪 ${commit#*: }" >> /tmp/tests.txt
                ;;
              ci:*)
                echo "- 🤖 ${commit#*: }" >> /tmp/ci.txt
                ;;
              refactor:*)
                echo "- ♻️ ${commit#*: }" >> /tmp/refactor.txt
                ;;
              *)
                echo "- ${commit}" >> /tmp/other.txt
                ;;
            esac
          done

          # Assemble changelog
          [ -f /tmp/features.txt ] && echo "### ✨ Features" >> /tmp/auto-release-notes.md && cat /tmp/features.txt >> /tmp/auto-release-notes.md && echo "" >> /tmp/auto-release-notes.md
          [ -f /tmp/fixes.txt ] && echo "### 🐛 Bug Fixes" >> /tmp/auto-release-notes.md && cat /tmp/fixes.txt >> /tmp/auto-release-notes.md && echo "" >> /tmp/auto-release-notes.md
          [ -f /tmp/docs.txt ] && echo "### 📝 Documentation" >> /tmp/auto-release-notes.md && cat /tmp/docs.txt >> /tmp/auto-release-notes.md && echo "" >> /tmp/auto-release-notes.md
          [ -f /tmp/tests.txt ] && echo "### 🧪 Testing" >> /tmp/auto-release-notes.md && cat /tmp/tests.txt >> /tmp/auto-release-notes.md && echo "" >> /tmp/auto-release-notes.md
          [ -f /tmp/ci.txt ] && echo "### 🤖 CI/CD" >> /tmp/auto-release-notes.md && cat /tmp/ci.txt >> /tmp/auto-release-notes.md && echo "" >> /tmp/auto-release-notes.md
          [ -f /tmp/refactor.txt ] && echo "### ♻️ Refactoring" >> /tmp/auto-release-notes.md && cat /tmp/refactor.txt >> /tmp/auto-release-notes.md && echo "" >> /tmp/auto-release-notes.md
          [ -f /tmp/chore.txt ] && echo "### 🔧 Maintenance" >> /tmp/auto-release-notes.md && cat /tmp/chore.txt >> /tmp/auto-release-notes.md && echo "" >> /tmp/auto-release-notes.md
          [ -f /tmp/other.txt ] && echo "### Other Changes" >> /tmp/auto-release-notes.md && cat /tmp/other.txt >> /tmp/auto-release-notes.md && echo "" >> /tmp/auto-release-notes.md

          # Add installation instructions
          echo "## 📦 Installation" >> /tmp/auto-release-notes.md
          echo "" >> /tmp/auto-release-notes.md
          echo '```bash' >> /tmp/auto-release-notes.md
          echo "code --install-extension kf-sql-formatter-${{ steps.get_version.outputs.VERSION }}.vsix" >> /tmp/auto-release-notes.md
          echo '```' >> /tmp/auto-release-notes.md

          cat /tmp/auto-release-notes.md
          echo "AUTO_NOTES_FILE=/tmp/auto-release-notes.md" >> $GITHUB_ENV

      - name: Determine release body
        id: release_body
        run: |
          if [ "${{ steps.check_notes.outputs.HAS_NOTES }}" = "true" ]; then
            echo "BODY_FILE=${{ env.NOTES_FILE }}" >> $GITHUB_ENV
          else
            echo "BODY_FILE=${{ env.AUTO_NOTES_FILE }}" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_version.outputs.TAG }}
          body_path: ${{ env.BODY_FILE }}
          files: ${{ env.VSIX_FILE }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "🎉 Release ${{ steps.get_version.outputs.TAG }} completed successfully!"
          echo "📦 VSIX: ${{ env.VSIX_FILE }}"
          echo "📄 Release notes: ${{ env.BODY_FILE }}"
          echo "🔗 https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.TAG }}"
